name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      version:
        description: 'Version to deploy'
        required: true
        default: 'latest'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  security-check:
    runs-on: ubuntu-latest
    outputs:
      security-passed: ${{ steps.security.outputs.passed }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security checks
      id: security
      run: |
        # Check for hardcoded secrets
        echo "🔍 Checking for hardcoded secrets..."
        
        # Common patterns to avoid
        PATTERNS=(
          "password\s*=\s*['\"][^'\"]*['\"]"
          "api_key\s*=\s*['\"][^'\"]*['\"]"
          "secret\s*=\s*['\"][^'\"]*['\"]"
          "token\s*=\s*['\"][^'\"]*['\"]"
          "AKIA[0-9A-Z]{16}"  # AWS Access Key
          "sk-[a-zA-Z0-9]{32}"  # OpenAI API Key
        )
        
        VIOLATIONS=0
        for pattern in "${PATTERNS[@]}"; do
          if grep -r -E "$pattern" . --exclude-dir=.git --exclude="*.md"; then
            echo "❌ Found potential hardcoded secret: $pattern"
            VIOLATIONS=$((VIOLATIONS + 1))
          fi
        done
        
        if [ $VIOLATIONS -gt 0 ]; then
          echo "passed=false" >> $GITHUB_OUTPUT
          echo "❌ Security check failed: $VIOLATIONS violations found"
          exit 1
        else
          echo "passed=true" >> $GITHUB_OUTPUT
          echo "✅ Security check passed"
        fi

  build:
    needs: security-check
    runs-on: ubuntu-latest
    if: needs.security-check.outputs.security-passed == 'true'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    needs: [security-check, build]
    runs-on: ubuntu-latest
    if: github.event.inputs.environment == 'staging'
    environment: staging
    
    steps:
    - name: Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment"
        echo "Image: ${{ needs.build.outputs.image-tag }}"
        echo "Environment: staging"
        
        # Simulate deployment
        echo "✅ Staging deployment completed"

  deploy-production:
    needs: [security-check, build]
    runs-on: ubuntu-latest
    if: github.event.inputs.environment == 'production'
    environment: 
      name: production
      url: https://myapp.example.com
    
    steps:
    - name: Manual approval checkpoint
      run: |
        echo "🔒 Production deployment requires manual approval"
        echo "Image: ${{ needs.build.outputs.image-tag }}"
        echo "Environment: production"
        
    - name: Deploy to production
      env:
        DB_PASSWORD: ${{ secrets.PROD_DB_PASSWORD }}
        API_KEY: ${{ secrets.PROD_API_KEY }}
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      run: |
        echo "🚀 Deploying to production environment"
        echo "✅ Production deployment completed"
        
        # Send notification (webhook URL is secret)
        if [ -n "$SLACK_WEBHOOK" ]; then
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"🚀 Production deployment completed successfully!"}' \
            "$SLACK_WEBHOOK" || echo "Failed to send notification"
        fi

  post-deploy-tests:
    needs: [deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
    - name: Run smoke tests
      run: |
        echo "🧪 Running post-deployment smoke tests"
        
        # Simulate health checks
        if [ "${{ github.event.inputs.environment }}" = "production" ]; then
          URL="https://myapp.example.com/health"
        else
          URL="https://staging.myapp.example.com/health"
        fi
        
        echo "Testing endpoint: $URL"
        echo "✅ All smoke tests passed"